""" Contains some shared types for properties """
from typing import Any, BinaryIO, Callable, Generic, MutableMapping, Optional, TextIO, Tuple, TypeVar, Union

import attr
import httpx


class Unset:
    def __bool__(self) -> bool:
        return False


UNSET: Unset = Unset()

{# Used as `FileProperty._json_type_string` #}
FileJsonType = Tuple[Optional[str], Union[BinaryIO, TextIO], Optional[str]]


@attr.s(auto_attribs=True)
class File:
    """ Contains information for file uploads """

    payload: Union[BinaryIO, TextIO]
    file_name: Optional[str] = None
    mime_type: Optional[str] = None

    def to_tuple(self) -> FileJsonType:
        """ Return a tuple representation that httpx will accept for multipart/form-data """
        return self.file_name, self.payload, self.mime_type


T = TypeVar("T")


@attr.s(auto_attribs=True)
class Response(Generic[T]):
    """ A response from an endpoint """

    status_code: int
    content: bytes
    headers: MutableMapping[str, str]
    parsed: Callable[[], T]


class ApiHTTPError(Exception):
    ...


class ApiRequestError(ApiHTTPError):
    def __init__(self, request: httpx.Request) -> None:
        super(ApiHTTPError, self).__init__()
        self.request = request


class ApiHTTPStatusError(ApiHTTPError):
    def __init__(self, response: httpx.Response, msg: str = "") -> None:
        super(ApiHTTPError, self).__init__()
        self.status_code = response.status_code
        self.response = response
        self.msg = msg


__all__ = ["ApiHTTPError", "ApiRequestError", "ApiHTTPStatusError", "File", "Response", "UNSET", "Unset"]
